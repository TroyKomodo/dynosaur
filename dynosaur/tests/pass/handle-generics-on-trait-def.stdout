#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use dynosaur::dynosaur;

trait MyTrait<T> {
    const N: i32;
    type Item;
    async fn foo(&self, x: &T)
    -> i32;
}
trait ErasedMyTrait<T> {
    const N: i32;
    type Item;
    fn foo<'life0, 'life1, 'dynosaur>(&'life0 self, x: &'life1 T)
    ->
        ::core::pin::Pin<Box<dyn ::core::future::Future<Output = i32> +
        'dynosaur>>
    where
    'life0: 'dynosaur,
    'life1: 'dynosaur,
    Self: 'dynosaur;
}
impl<T, DYNOSAUR: MyTrait<T>> ErasedMyTrait<T> for DYNOSAUR {
    const N: i32 = <Self as MyTrait<T>>::N;
    type Item = <Self as MyTrait<T>>::Item;
    fn foo<'life0, 'life1, 'dynosaur>(&'life0 self, x: &'life1 T)
        ->
            ::core::pin::Pin<Box<dyn ::core::future::Future<Output = i32> +
            'dynosaur>> where 'life0: 'dynosaur, 'life1: 'dynosaur,
        Self: 'dynosaur {
        Box::pin(<Self as MyTrait<T>>::foo(self, x))
    }
}
struct DynMyTrait<'dynosaur, T, Item> {
    ptr: *mut (dyn ErasedMyTrait<T, Item = Item> + 'dynosaur),
    owned: bool,
}

fn main() {}
