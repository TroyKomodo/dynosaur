#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use dynosaur::dynosaur;

trait MyTrait {
    type Item;
    async fn foo(&self)
    -> Self::Item;
}
mod _dynosaur_macro_DynMyTrait {
    use super::*;
    trait ErasedMyTrait {
        type Item;
        fn foo<'life0, 'dynosaur>(&'life0 self)
        ->
            ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
            Self::Item> + 'dynosaur>>
        where
        'life0: 'dynosaur,
        Self: 'dynosaur;
    }
    impl<DYNOSAUR: MyTrait> ErasedMyTrait for DYNOSAUR {
        type Item = <Self as MyTrait>::Item;
        fn foo<'life0, 'dynosaur>(&'life0 self)
            ->
                ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                Self::Item> + 'dynosaur>> where 'life0: 'dynosaur,
            Self: 'dynosaur {
            Box::pin(<Self as MyTrait>::foo(self))
        }
    }
    pub struct DynMyTrait<'dynosaur_struct, Item> {
        ptr: *mut (dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct),
        owned: bool,
    }
    impl<'dynosaur_struct, Item> MyTrait for
        DynMyTrait<'dynosaur_struct, Item> {
        type Item = Item;
        async fn foo(&self) -> Self::Item {
            unsafe { &*self.ptr }.foo().await
        }
    }
    impl<'dynosaur_struct, Item> DynMyTrait<'dynosaur_struct, Item> {
        pub fn new<DYNOSAUR>(value: DYNOSAUR) -> Self where
            DYNOSAUR: MyTrait<Item = Item> + 'dynosaur_struct,
            Item: 'dynosaur_struct {
            let value = Box::new(value);
            Self {
                ptr: Box::into_raw(value as
                            Box<dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct>) as
                    *mut (dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct),
                owned: true,
            }
        }
        pub fn from_ref<DYNOSAUR>(value: &'dynosaur_struct DYNOSAUR)
            -> ::dynosaur::macro_lib::Ref<Self> where
            DYNOSAUR: MyTrait<Item = Item> + 'dynosaur_struct,
            Item: 'dynosaur_struct {
            let this =
                Self {
                    ptr: value as
                                &'dynosaur_struct (dyn ErasedMyTrait<Item = Item> +
                                'dynosaur_struct) as
                            *const (dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct)
                        as *mut (dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct),
                    owned: false,
                };
            unsafe { ::dynosaur::macro_lib::Ref::new(this) }
        }
        pub fn from_mut<DYNOSAUR>(value: &'dynosaur_struct mut DYNOSAUR)
            -> ::dynosaur::macro_lib::RefMut<Self> where
            DYNOSAUR: MyTrait<Item = Item> + 'dynosaur_struct,
            Item: 'dynosaur_struct {
            let this =
                Self {
                    ptr: value as
                            &'dynosaur_struct mut (dyn ErasedMyTrait<Item = Item> +
                            'dynosaur_struct) as
                        *mut (dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct),
                    owned: false,
                };
            unsafe { ::dynosaur::macro_lib::RefMut::new(this) }
        }
    }
}
use _dynosaur_macro_DynMyTrait::DynMyTrait;

fn main() {}
